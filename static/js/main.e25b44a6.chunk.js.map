{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["random","Math","round","App","state","showUnicorns","top","bottom","answer","handleCheck","parseInt","setState","showThumbUp","thumbAnimation","setTimeout","showThumbDown","handleAnswerChange","e","target","value","className","style","paddingTop","fontSize","width","margin","this","position","left","animation","float","textAlign","colSpan","onChange","placeholder","type","onClick","marginLeft","_","range","map","row","console","log","key","col","backgroundColor","borderWidth","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAKMA,G,MAAS,kBAAOC,KAAKC,MAAsB,IAAhBD,KAAKD,UAAkB,GAAM,IAiJ/CG,E,2MA9IbC,MAAQ,CACNC,cAAc,EACdC,IAAKN,IACLO,OAAQ,EACRC,OAAQ,I,EAGVC,YAAc,WAEVC,SAAS,EAAKN,MAAMI,OAAQ,MAC5B,EAAKJ,MAAME,IAAM,EAAKF,MAAMG,QAE5B,EAAKI,SAAS,CACZN,cAAc,EACdC,IAAKN,IAELQ,OAAQ,GACRI,aAAa,EACbC,eAAgB,WAElBC,WAAW,kBAAM,EAAKH,SAAS,CAACE,eAAgB,aAAa,KAC7DC,WAAW,kBAAM,EAAKH,SAAS,CAACC,aAAa,KAAS,OAEtD,EAAKD,SAAS,CACZN,cAAc,EACdG,OAAQ,GACRO,eAAe,EACfF,eAAgB,WAElBC,WAAW,kBAAM,EAAKH,SAAS,CAACE,eAAgB,aAAa,KAC7DC,WAAW,kBAAM,EAAKH,SAAS,CAACI,eAAe,KAAS,O,EAI5DC,mBAAqB,SAAAC,GACnB,EAAKN,SAAS,CAACH,OAAQS,EAAEC,OAAOC,S,wEAGxB,IAAD,OACP,OACE,yBACEC,UAAU,MACVC,MAAO,CACLC,WAAY,QACZC,SAAU,QACVC,MAAO,MACPC,OAAQ,SAETC,KAAKtB,MAAMQ,aACV,yBACES,MAAO,CACLM,SAAU,WACVrB,IAAK,MACLsB,KAAM,MACNL,SAAU,OACVM,UAAWH,KAAKtB,MAAMS,eAAiB,QAN3C,gBAWDa,KAAKtB,MAAMW,eACV,yBACEM,MAAO,CACLM,SAAU,WACVrB,IAAK,MACLsB,KAAM,MACNL,SAAU,OACVM,UAAWH,KAAKtB,MAAMS,eAAiB,QAN3C,gBAWF,yBAAKQ,MAAO,CAACS,MAAO,SAClB,+BACE,gCACA,+BACE,4BACE,6BACA,wBAAIT,MAAO,CAACE,SAAU,QAASQ,UAAW,UACvCL,KAAKtB,MAAME,MAGhB,4BACE,iCACA,wBAAIe,MAAO,CAACE,SAAU,QAASQ,UAAW,UACvCL,KAAKtB,MAAMG,SAGhB,4BACE,wBAAIyB,QAAQ,KACV,2BACEX,MAAO,CAACE,SAAU,QAASQ,UAAW,SACtCX,UAAU,eACVD,MAAOO,KAAKtB,MAAMI,OAClByB,SAAUP,KAAKV,mBACfkB,YAAY,SACZC,KAAK,SAEP,6BACA,4BACEf,UAAU,kBACVC,MAAO,CAACE,SAAU,QAASQ,UAAW,SACtCK,QAASV,KAAKjB,aAHhB,eAWTiB,KAAKtB,MAAMC,cACZ,yBAAKgB,MAAO,CAACgB,WAAY,MAAOP,MAAO,SACrC,2BAAOV,UAAU,wBACf,gCACA,+BACGkB,IAAEC,MAAMb,KAAKtB,MAAME,KAAKkC,IAAI,SAAAC,GAE3B,OADAC,QAAQC,IAAI,aAEV,wBAAIC,IAAKH,GACNH,IAAEC,MAAM,EAAKnC,MAAMG,QAAQiC,IAAI,SAAAK,GAE9B,OADAH,QAAQC,IAAI,aAEV,wBACEtB,MAAO,CACLyB,gBAAiB,mBACjBC,YAAa,SAEfH,IAAKC,GALP,6B,GA3HNG,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e25b44a6.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport './App.css';\n\nconst random = () => (Math.round(Math.random() * 100) % 10) + 1;\n\nclass App extends React.Component {\n  state = {\n    showUnicorns: false,\n    top: random(),\n    bottom: 6,\n    answer: '',\n  };\n\n  handleCheck = () => {\n    if (\n      parseInt(this.state.answer, 10) ===\n      this.state.top * this.state.bottom\n    ) {\n      this.setState({\n        showUnicorns: false,\n        top: random(),\n        //bottom: random(),\n        answer: '',\n        showThumbUp: true,\n        thumbAnimation: 'fadein',\n      });\n      setTimeout(() => this.setState({thumbAnimation: 'fadeout'}), 1000);\n      setTimeout(() => this.setState({showThumbUp: false}), 2000);\n    } else {\n      this.setState({\n        showUnicorns: true,\n        answer: '',\n        showThumbDown: true,\n        thumbAnimation: 'fadein',\n      });\n      setTimeout(() => this.setState({thumbAnimation: 'fadeout'}), 2000);\n      setTimeout(() => this.setState({showThumbDown: false}), 3000);\n    }\n  };\n\n  handleAnswerChange = e => {\n    this.setState({answer: e.target.value});\n  };\n\n  render() {\n    return (\n      <div\n        className=\"App\"\n        style={{\n          paddingTop: '150px',\n          fontSize: '1.5em',\n          width: '80%',\n          margin: 'auto',\n        }}>\n        {this.state.showThumbUp && (\n          <div\n            style={{\n              position: 'absolute',\n              top: '30%',\n              left: '20%',\n              fontSize: '10em',\n              animation: this.state.thumbAnimation + ' 2s',\n            }}>\n            üê∂\n          </div>\n        )}\n        {this.state.showThumbDown && (\n          <div\n            style={{\n              position: 'absolute',\n              top: '30%',\n              left: '20%',\n              fontSize: '10em',\n              animation: this.state.thumbAnimation + ' 2s',\n            }}>\n            üëª\n          </div>\n        )}\n        <div style={{float: 'left'}}>\n          <table>\n            <thead></thead>\n            <tbody>\n              <tr>\n                <td></td>\n                <td style={{fontSize: '1.5em', textAlign: 'right'}}>\n                  {this.state.top}\n                </td>\n              </tr>\n              <tr>\n                <td>x</td>\n                <td style={{fontSize: '1.5em', textAlign: 'right'}}>\n                  {this.state.bottom}\n                </td>\n              </tr>\n              <tr>\n                <td colSpan=\"2\">\n                  <input\n                    style={{fontSize: '1.5em', textAlign: 'right'}}\n                    className=\"form-control\"\n                    value={this.state.answer}\n                    onChange={this.handleAnswerChange}\n                    placeholder=\"answer\"\n                    type=\"text\"\n                  />\n                  <br />\n                  <button\n                    className=\"btn btn-success\"\n                    style={{fontSize: '1.5em', textAlign: 'right'}}\n                    onClick={this.handleCheck}>\n                    check!\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        {this.state.showUnicorns &&\n        <div style={{marginLeft: '5em', float: 'left'}}>\n          <table className=\"table table-bordered\">\n            <thead></thead>\n            <tbody>\n              {_.range(this.state.top).map(row => {\n                console.log('in a row!');\n                return (\n                  <tr key={row}>\n                    {_.range(this.state.bottom).map(col => {\n                      console.log('in a col!');\n                      return (\n                        <td\n                          style={{\n                            backgroundColor: 'rgb(25, 25, 200)',\n                            borderWidth: '0.2em',\n                          }}\n                          key={col}>\n                          ü¶Ñ\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}